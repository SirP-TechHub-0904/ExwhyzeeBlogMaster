@page
@using Microsoft.AspNetCore.Html
@model AdminUI.Areas_Admin_Pages_Posts.IndexModel

@{
    ViewData["Title"] = "Posts";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Posts (@Model.Posts.Count())</h2>
        <a class="btn btn-primary" asp-page="./ManagePost">
            <i class="bi bi-plus-circle"></i> Create New
        </a>
    </div>
    <form method="get" class="mb-3">
        <div class="row g-2">
            <div class="col-md-5">
                <div class="input-group">
                    <input type="text" class="form-control" name="query" value="@Model.Query" placeholder="Search posts..." />
                </div>
            </div>

            <div class="col-md-3">
                <select name="filter" class="form-select">
                    <option value="">-- All --</option>
                    <option value="published" selected="@(Model.Filter == "published")">Published</option>
                    <option value="unpublished" selected="@(Model.Filter == "unpublished")">Unpublished</option>
                    <option value="scheduled" selected="@(Model.Filter == "scheduled")">Scheduled</option>
                </select>
            </div>

            <div class="col-md-4">
                <button type="submit" class="btn btn-primary w-100">Filter</button>
            </div>
        </div>
    </form>

    <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle">
           

            <thead class="table-light">
                <tr class="post-head">
                    <th>S/N</th>

                    <th class="title-col @(Model.SortBy == "Title" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Title", sortAsc = Model.SortBy == "Title" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Title @(Model.SortBy == "Title" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="date-col @(Model.SortBy == "Date" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Date", sortAsc = Model.SortBy == "Date" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Date @(Model.SortBy == "Date" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="category-col @(Model.SortBy == "Category" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Category", sortAsc = Model.SortBy == "Category" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Category @(Model.SortBy == "Category" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="bool-col @(Model.SortBy == "Published" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Published", sortAsc = Model.SortBy == "Published" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Published @(Model.SortBy == "Published" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="bool-col @(Model.SortBy == "Featured" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Featured", sortAsc = Model.SortBy == "Featured" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Featured @(Model.SortBy == "Featured" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="bool-col @(Model.SortBy == "Breaking" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Breaking", sortAsc = Model.SortBy == "Breaking" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Breaking @(Model.SortBy == "Breaking" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="bool-col @(Model.SortBy == "Hero" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Hero", sortAsc = Model.SortBy == "Hero" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Hero @(Model.SortBy == "Hero" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="bool-col @(Model.SortBy == "Surface" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Surface", sortAsc = Model.SortBy == "Surface" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Surface @(Model.SortBy == "Surface" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="views-col @(Model.SortBy == "Views" ? "sort-active" : "")">
                        <a href="@Url.Page(null, new { sortBy = "Views", sortAsc = Model.SortBy == "Views" ? !Model.SortAsc : true, query = Model.Query, filter = Model.Filter })">
                            Views @(Model.SortBy == "Views" ? (Model.SortAsc ? "↑" : "↓") : "")
                        </a>
                    </th>

                    <th class="action-col">Actions</th>
                </tr>

            </thead>
            <tbody>
                @{ int sn = 0; }

                @foreach (var item in Model.Posts)
                {
                    <tr>
                        <td>@(++sn)</td>
                        <td>
                            <a asp-page="./ManagePost" asp-route-id="@item.Id" asp-route-slug="@item.Slug" class="text-decoration-none fw-bold">
                                @item.Title
                            </a>
                        </td>
                        <td>@item.Date.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@item.Category?.Title</td>

                        <td>
                            @(item.IsPublished ? "✅" : "❌")
                            <span style="font-size:14px;">
                                @(item.PublishedAt.HasValue ? item.PublishedAt.Value.ToString("yyyy-MM-dd HH:mm") : "")
                            </span>
                        </td>
                        <td>@(item.IsFeatured ? "✅" : "❌")</td>
                        <td>@(item.IsBreakingNews ? "✅" : "❌")</td>
                        <td>@(item.ShowInHero ? "✅" : "❌")</td>
                        <td>@(item.ShowInSurface ? "✅" : "❌")</td>
                        <td>@item.ViewCount</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a class="btn btn-outline-info" asp-page="./Preview" asp-route-slug="@item.Slug">Preview</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (Model.TotalPages > 1)
        {
            <nav class="mt-4">
                <ul class="pagination">

                    <!-- First page «« -->
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="?query=@Model.Query&filter=@Model.Filter&sortBy=@Model.SortBy&sortAsc=@Model.SortAsc&resultPage=1">&laquo;&laquo;</a>
                    </li>

                    <!-- Previous page « -->
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="?query=@Model.Query&filter=@Model.Filter&sortBy=@Model.SortBy&sortAsc=@Model.SortAsc&resultPage=@(Model.CurrentPage - 1)">&laquo;</a>
                    </li>

                    <!-- First 3 pages -->
                    @for (int i = 1; i <= Math.Min(3, Model.TotalPages); i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="?query=@Model.Query&filter=@Model.Filter&sortBy=@Model.SortBy&sortAsc=@Model.SortAsc&resultPage=@i">@i</a>
                        </li>
                    }

                    <!-- Ellipsis -->
                    @if (Model.TotalPages > 6)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }

                    <!-- Last 3 pages -->
                    @for (int i = Model.TotalPages - 2; i <= Model.TotalPages; i++)
                    {
                        if (i > 3)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="?query=@Model.Query&filter=@Model.Filter&sortBy=@Model.SortBy&sortAsc=@Model.SortAsc&resultPage=@i">@i</a>
                            </li>
                        }
                    }

                    <!-- Next page » -->
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="?query=@Model.Query&filter=@Model.Filter&sortBy=@Model.SortBy&sortAsc=@Model.SortAsc&resultPage=@(Model.CurrentPage + 1)">&raquo;</a>
                    </li>

                    <!-- Last page »» -->
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="?query=@Model.Query&filter=@Model.Filter&sortBy=@Model.SortBy&sortAsc=@Model.SortAsc&resultPage=@Model.TotalPages">&raquo;&raquo;</a>
                    </li>

                </ul>
            </nav>
        }

    </div>
</div>

@section Scripts {
}
